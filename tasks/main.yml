---
# tasks file for hmpps-delius-core-apacheds-bootstrap

- name: Start service apacheds, on boot
  service:
    name: "{{ apacheds_version }}"
    enabled: yes

- name: Restart apacheds
  include: restart-apacheds.yml

- name: Create workspace if it doesn't exist
  become: yes
  become_user: apacheds
  file:
    path: '{{ workspace }}'
    state: directory
    mode: 0755

- name: Copy LDIFs
  become: yes
  become_user: apacheds
  template:
    src: '{{ item.file }}.j2'
    dest: '{{ workspace }}/{{ item.file }}'
    mode: 0644
  with_items:
    - { file: partition.ldif }
    - { file: context.ldif }
    - { file: schema.ldif }
    - { file: service-users.ldif }
    - { file: test-users.ldif }
    - { file: modify-schema.ldif }
    - { file: modify-admin.ldif }

- name: Download role catalogues
  when: s3_dependencies_bucket is defined
  become: yes
  become_user: apacheds
  aws_s3:
    bucket: '{{ s3_dependencies_bucket }}'
    object: '/dependencies/delius-core/NDelius-{{ ndelius_version }}/scripts/User Data Store/{{ item.file }}'
    dest: '{{ workspace }}/{{ item.file }}'
    mode: get
  with_items:
    - { file: nd_role_catalogue.ldif }
    - { file: nd_role_groups.ldif }

- name: Copy local role catalogues
  when: s3_dependencies_bucket is not defined
  copy:
    src: 's3/dependencies/delius-core/NDelius-{{ ndelius_version }}/scripts/User Data Store/{{ item.file }}'
    dest: '{{ workspace }}/{{ item.file }}'
    owner: apacheds
    group: apacheds
    mode: 0644
  with_items:
    - { file: nd_role_catalogue.ldif }
    - { file: nd_role_groups.ldif }

- name: Replace context in LDIFs
  become: yes
  become_user: apacheds
  replace:
    path: '{{ workspace }}/{{ item.file }}'
    regexp: 'dc=pcms,dc=internal'
    replace: '{{ base_root }}'
  with_items:
    - { file: nd_role_catalogue.ldif }
    - { file: nd_role_groups.ldif }

- name: Update admin password
  become: yes
  become_user: apacheds
  shell: 'ldapmodify {{ ldap_connection }} -f {{ workspace }}/modify-admin.ldif'
  environment:
    bind_password: '{{ bind_password }}'

- name: Create partition & import schema
  become: yes
  become_user: apacheds
  shell: 'ldapadd {{ ldap_connection }} -f {{ workspace }}/{{ item.file }}'
  environment:
    bind_password: '{{ bind_password }}'
  with_items:
    - { file: partition.ldif }
    - { file: schema.ldif }

- name: Replace Base64-encoded creatorsName attribute in schema with plaintext value
  become: yes
  become_user: apacheds
  replace:
    path: '~/default/partitions/schema/ou=schema/cn=subschemasubentry.ldif'
    regexp: 'creatorsName:: [\w\W\n]+?(.+?):'
    replace: 'creatorsName: {{ bind_user }}\n\1:'

- name: Modify existing schema objects
  become: yes
  become_user: apacheds
  shell: 'ldapmodify {{ ldap_connection }} -f {{ workspace }}/modify-schema.ldif'
  environment:
    bind_password: '{{ bind_password }}'

- name: Restart apacheds
  include: restart-apacheds.yml

- name: Import roles, groups and service users
  become: yes
  become_user: apacheds
  shell: 'ldapadd {{ ldap_connection }} -f {{ workspace }}/{{ item.file }}'
  environment:
    bind_password: '{{ bind_password }}'
  with_items:
    - { file: context.ldif }
    - { file: nd_role_catalogue.ldif }
    - { file: nd_role_groups.ldif }
    - { file: service-users.ldif }

- name: Restart apacheds
  include: restart-apacheds.yml

- name: Download LDIF file for import
  when: s3_dependencies_bucket is defined and import_users_ldif is defined
  become: yes
  become_user: apacheds
  aws_s3:
    bucket: '{{ s3_dependencies_bucket }}'
    object: '/ldapbackup/{{ import_users_ldif }}'
    dest: '{{ workspace }}/{{ import_users_ldif }}'
    mode: get

- name: Copy local LDIF file for import
  when: s3_dependencies_bucket is not defined and import_users_ldif is defined
  copy:
    src: 's3/ldapbackup/{{ import_users_ldif }}'
    dest: '{{ workspace }}/{{ import_users_ldif }}'
    owner: apacheds
    group: apacheds
    mode: 0644

- name: Remove OID-specific stuff from LDIF
  when: import_users_ldif is defined and sanitize_oid_ldif
  replace:
    path: '{{ workspace }}/{{ import_users_ldif }}'
    regexp: '{{ item.regexp }}'
    replace: ''
  with_items:
    - { regexp: '(?i)dn: cn=users[\w\W]+?\n\n' }
    - { regexp: '(?i)dn:.*eisusers[\w\W]+?\n\n' }
    - { regexp: '(?i)dn:.*cn=SPG,[\w\W]+?\n\n' }
    - { regexp: '(?i)dn:.*cn=ALF,[\w\W]+?\n\n' }
    - { regexp: '(?i)dn:.*cn=c\d{2},[\w\W]+?\n\n' }
    - { regexp: '(?i)dn:.*cn=ndrolecatalogue,[\w\W]+?\n\n' }
    - { regexp: '(?i)dn:.*cn=ndrolegroups,[\w\W]+?\n\n' }
    - { regexp: '(?i)dn:.*cn=orcladmin,[\w\W]+?\n\n' }
    - { regexp: '(?i)dn:.*cn=public,[\w\W]+?\n\n' }
    - { regexp: '(?i)^objectclass: orcl.+?\n' }
    - { regexp: '(?i)^authpassword.+?\n' }
    - { regexp: '(?i)^orcl.+?\n' }
    - { regexp: '(?i)^krbprincipalname.+?\n' }

- name: Import users
  when: import_users_ldif is defined
  become: yes
  become_user: apacheds
  shell: 'ldapadd {{ ldap_connection }} -c -f {{ workspace }}/{{ import_users_ldif }}'
  environment:
    bind_password: '{{ bind_password }}'