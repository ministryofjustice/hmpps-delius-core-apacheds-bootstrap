---
# tasks file for hmpps-delius-core-apacheds-bootstrap

- name: Create workspace if it doesn't exist
  become: yes
  become_user: apacheds
  file:
    path: '{{ workspace }}'
    state: directory
    mode: 0755

- name: Copy LDIFs
  become: yes
  become_user: apacheds
  template:
    src: '{{ item.file }}.j2'
    dest: '{{ workspace }}/{{ item.file }}'
    mode: 0644
  with_items:
    - { file: partition.ldif }
    - { file: context.ldif }
    - { file: schema.ldif }
    - { file: pwm-schema.ldif }
    - { file: service-users.ldif }
    - { file: modify-schema.ldif }
    - { file: modify-admin.ldif }
    - { file: repl-provider.ldif }
    - { file: repl-consumer.ldif }
    - { file: interceptor.ldif }
    - { file: test-users.ldif }

- name: Copy config
  become: yes
  become_user: apacheds
  template:
    src: '{{ item.file }}.j2'
    dest: '{{ apacheds_install_directory }}/conf/{{ item.file }}'
    mode: 0644
  with_items:
    - { file: log4j.properties }

- name: Copy custom lib jar
  become: yes
  become_user: apacheds
  copy:
    src: 'files/NDelius-apacheds-lib-3.0.jar'
    dest: '{{ apacheds_lib_directory }}/lib/NDelius-apacheds-lib-3.0.jar'
    mode: 0644

- name: Download role catalogues
  become: yes
  become_user: apacheds
  aws_s3:
    bucket: '{{ s3_dependencies_bucket }}'
    object: '/dependencies/delius-core/NDelius-{{ ndelius_version }}/scripts/User Data Store/{{ item.file }}'
    dest: '{{ workspace }}/{{ item.file }}'
    mode: get
  with_items:
    - { file: nd_role_catalogue.ldif }
    - { file: nd_role_groups.ldif }

- name: Replace context in LDIFs
  become: yes
  become_user: apacheds
  replace:
    path: '{{ workspace }}/{{ item.file }}'
    regexp: 'dc=pcms,dc=internal'
    replace: '{{ base_root }}'
  with_items:
    - { file: nd_role_catalogue.ldif }
    - { file: nd_role_groups.ldif }

- name: Get the name of the latest backup
  when: import_users_ldif == 'LATEST'
  become: yes
  become_user: apacheds
  shell: "aws s3 ls s3://{{ s3_backups_bucket }}/ldap/ --recursive | sort | tail -n 1 | awk '{print $4}'"
  register: latest_backup

- name: Store the name of the latest backup
  when: import_users_ldif == 'LATEST'
  set_fact:
    import_users_ldif: '{{ latest_backup.stdout }}'

- name: Create LDIF directory
  when: import_users_ldif != '' and not is_consumer
  become: yes
  become_user: apacheds
  shell: 'mkdir -p $(dirname {{ workspace }}/{{ import_users_ldif }})'

- name: Download LDIF file for import
  when: import_users_ldif != '' and not is_consumer
  become: yes
  become_user: apacheds
  aws_s3:
    bucket: '{{ s3_backups_bucket }}'
    object: '{{ import_users_ldif }}'
    dest: '{{ workspace }}/{{ import_users_ldif }}'
    mode: get

- name: Remove OID-specific stuff from LDIF and sort hierarchically
  when: import_users_ldif != '' and not is_consumer and sanitize_oid_ldif
  block:
    - copy:
        src: 'ldif-sort.jar'
        dest: '{{ workspace }}/ldif-sort.jar'
        mode: 0644
    - shell: 'java -jar {{ workspace }}/ldif-sort.jar {{ workspace }}/{{ import_users_ldif }} > {{ workspace }}/{{ import_users_ldif }}-sorted'
    - shell: 'mv {{ workspace }}/{{ import_users_ldif }}-sorted {{ workspace }}/{{ import_users_ldif }}'
    - replace:
        path: '{{ workspace }}/{{ import_users_ldif }}'
        regexp: '{{ item.regexp }}'
        replace: '{{ item.replace }}'
      with_items:
        - { regexp: '(?i)dn: cn=users[\w\W]+?\n\n', replace: '' }
        - { regexp: '(?i)dn:.*eisusers[\w\W]+?\n\n', replace: '' }
        - { regexp: '(?i)dn:.*cn=SPG,[\w\W]+?\n\n', replace: '' }
        - { regexp: '(?i)dn:.*cn=ALF,[\w\W]+?\n\n', replace: '' }
        - { regexp: '(?i)dn:.*cn=c\d{2},[\w\W]+?\n\n', replace: '' }
        - { regexp: '(?i)dn:.*cn=ndrolecatalogue,[\w\W]+?\n\n', replace: '' }
        - { regexp: '(?i)dn:.*cn=ndrolegroups,[\w\W]+?\n\n', replace: '' }
        - { regexp: '(?i)dn:.*cn=orcladmin,[\w\W]+?\n\n', replace: '' }
        - { regexp: '(?i)dn:.*cn=public,[\w\W]+?\n\n', replace: '' }
        - { regexp: '(?i)^orclActiveStartDate: ', replace: 'startDate: ' }
        - { regexp: '(?i)^orclActiveEndDate: ', replace: 'endDate: ' }
        - { regexp: '(?i)^objectclass: orcl.+?\n', replace: '' }
        - { regexp: '(?i)^authpassword.+?\n', replace: '' }
        - { regexp: '(?i)^orcl.+?\n', replace: '' }
        - { regexp: '(?i)^krbprincipalname.+?\n', replace: '' }

- name: Upload backup script
  when: not is_consumer
  template:
    src: 'backup_ldap.sh.j2'
    dest: '/usr/bin/backup_ldap'
    mode: u+x